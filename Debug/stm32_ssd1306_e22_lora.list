
stm32_ssd1306_e22_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029e4  20000014  080045b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200029f8  080045b4  000229f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b8c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002898  00000000  00000000  00031bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00035430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155ca  00000000  00000000  00036300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001197c  00000000  00000000  0004b8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095af5  00000000  00000000  0005d246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2d3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  000f2d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004540 	.word	0x08004540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004540 	.word	0x08004540

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f103 0208 	add.w	r2, r3, #8
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f04f 32ff 	mov.w	r2, #4294967295
 80004fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f103 0208 	add.w	r2, r3, #8
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f103 0208 	add.w	r2, r3, #8
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000554:	d103      	bne.n	800055e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e00c      	b.n	8000578 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3308      	adds	r3, #8
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e002      	b.n	800056c <vListInsert+0x2e>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	429a      	cmp	r2, r3
 8000576:	d2f6      	bcs.n	8000566 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	6892      	ldr	r2, [r2, #8]
 80005c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	6852      	ldr	r2, [r2, #4]
 80005d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d103      	bne.n	80005e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10a      	bne.n	8000632 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d05d      	beq.n	80006f4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800063c:	2b00      	cmp	r3, #0
 800063e:	d059      	beq.n	80006f4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	fba3 2302 	umull	r2, r3, r3, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	d000      	beq.n	8000654 <xQueueGenericReset+0x50>
 8000652:	2101      	movs	r1, #1
 8000654:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000656:	2b00      	cmp	r3, #0
 8000658:	d14c      	bne.n	80006f4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800065a:	f001 fd75 	bl	8002148 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000666:	6939      	ldr	r1, [r7, #16]
 8000668:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	441a      	add	r2, r3
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2200      	movs	r2, #0
 8000678:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068a:	3b01      	subs	r3, #1
 800068c:	6939      	ldr	r1, [r7, #16]
 800068e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000690:	fb01 f303 	mul.w	r3, r1, r3
 8000694:	441a      	add	r2, r3
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d114      	bne.n	80006da <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d01a      	beq.n	80006ee <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff65 	bl	800158c <xTaskRemoveFromEventList>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d012      	beq.n	80006ee <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <xQueueGenericReset+0x11c>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	e009      	b.n	80006ee <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3310      	adds	r3, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff00 	bl	80004e4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	3324      	adds	r3, #36	; 0x24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fefb 	bl	80004e4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006ee:	f001 fd5b 	bl	80021a8 <vPortExitCritical>
 80006f2:	e001      	b.n	80006f8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10a      	bne.n	8000714 <xQueueGenericReset+0x110>
        __asm volatile
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	f3bf 8f6f 	isb	sy
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	60bb      	str	r3, [r7, #8]
    }
 8000710:	bf00      	nop
 8000712:	e7fe      	b.n	8000712 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000714:	697b      	ldr	r3, [r7, #20]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af02      	add	r7, sp, #8
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d02e      	beq.n	800079a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073c:	2100      	movs	r1, #0
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	fba3 2302 	umull	r2, r3, r3, r2
 8000746:	2b00      	cmp	r3, #0
 8000748:	d000      	beq.n	800074c <xQueueGenericCreate+0x28>
 800074a:	2101      	movs	r1, #1
 800074c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800074e:	2b00      	cmp	r3, #0
 8000750:	d123      	bne.n	800079a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800075a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800075e:	d81c      	bhi.n	800079a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	3348      	adds	r3, #72	; 0x48
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fdc2 	bl	80022f8 <pvPortMalloc>
 8000774:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01c      	beq.n	80007b6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3348      	adds	r3, #72	; 0x48
 8000784:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000786:	79fa      	ldrb	r2, [r7, #7]
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f000 f814 	bl	80007c0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000798:	e00d      	b.n	80007b6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10a      	bne.n	80007b6 <xQueueGenericCreate+0x92>
        __asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	613b      	str	r3, [r7, #16]
    }
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007b6:	69fb      	ldr	r3, [r7, #28]
    }
 80007b8:	4618      	mov	r0, r3
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	e002      	b.n	80007e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007ee:	2101      	movs	r1, #1
 80007f0:	69b8      	ldr	r0, [r7, #24]
 80007f2:	f7ff ff07 	bl	8000604 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10a      	bne.n	8000830 <xQueueReceive+0x30>
        __asm volatile
 800081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800081e:	f383 8811 	msr	BASEPRI, r3
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	f3bf 8f4f 	dsb	sy
 800082a:	623b      	str	r3, [r7, #32]
    }
 800082c:	bf00      	nop
 800082e:	e7fe      	b.n	800082e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <xQueueReceive+0x3e>
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <xQueueReceive+0x42>
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <xQueueReceive+0x44>
 8000842:	2300      	movs	r3, #0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10a      	bne.n	800085e <xQueueReceive+0x5e>
        __asm volatile
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	61fb      	str	r3, [r7, #28]
    }
 800085a:	bf00      	nop
 800085c:	e7fe      	b.n	800085c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800085e:	f001 f85d 	bl	800191c <xTaskGetSchedulerState>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <xQueueReceive+0x6e>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <xQueueReceive+0x72>
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <xQueueReceive+0x74>
 8000872:	2300      	movs	r3, #0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <xQueueReceive+0x8e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800088e:	f001 fc5b 	bl	8002148 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01f      	beq.n	80008de <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008a2:	f000 f88d 	bl	80009c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00f      	beq.n	80008d6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b8:	3310      	adds	r3, #16
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fe66 	bl	800158c <xTaskRemoveFromEventList>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <xQueueReceive+0x1bc>)
 80008c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008d6:	f001 fc67 	bl	80021a8 <vPortExitCritical>
                return pdPASS;
 80008da:	2301      	movs	r3, #1
 80008dc:	e069      	b.n	80009b2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008e4:	f001 fc60 	bl	80021a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e062      	b.n	80009b2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ff1e 	bl	8001738 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000900:	f001 fc52 	bl	80021a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000904:	f000 fb4c 	bl	8000fa0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000908:	f001 fc1e 	bl	8002148 <vPortEnterCritical>
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000912:	b25b      	sxtb	r3, r3
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d103      	bne.n	8000922 <xQueueReceive+0x122>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000928:	b25b      	sxtb	r3, r3
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d103      	bne.n	8000938 <xQueueReceive+0x138>
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000938:	f001 fc36 	bl	80021a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800093c:	1d3a      	adds	r2, r7, #4
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f000 ff0d 	bl	8001764 <xTaskCheckForTimeOut>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d123      	bne.n	8000998 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000952:	f000 f8ad 	bl	8000ab0 <prvIsQueueEmpty>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d017      	beq.n	800098c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	3324      	adds	r3, #36	; 0x24
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fda7 	bl	80014b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800096a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800096c:	f000 f84e 	bl	8000a0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000970:	f000 fb24 	bl	8000fbc <xTaskResumeAll>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d189      	bne.n	800088e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <xQueueReceive+0x1bc>)
 800097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	e780      	b.n	800088e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800098c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800098e:	f000 f83d 	bl	8000a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000992:	f000 fb13 	bl	8000fbc <xTaskResumeAll>
 8000996:	e77a      	b.n	800088e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800099a:	f000 f837 	bl	8000a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800099e:	f000 fb0d 	bl	8000fbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009a4:	f000 f884 	bl	8000ab0 <prvIsQueueEmpty>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f43f af6f 	beq.w	800088e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80009b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d018      	beq.n	8000a04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	441a      	add	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d303      	bcc.n	80009f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68d9      	ldr	r1, [r3, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	461a      	mov	r2, r3
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	f003 fd88 	bl	8004514 <memcpy>
    }
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a14:	f001 fb98 	bl	8002148 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a20:	e011      	b.n	8000a46 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d012      	beq.n	8000a50 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3324      	adds	r3, #36	; 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fdac 	bl	800158c <xTaskRemoveFromEventList>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a3a:	f000 fef1 	bl	8001820 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dce9      	bgt.n	8000a22 <prvUnlockQueue+0x16>
 8000a4e:	e000      	b.n	8000a52 <prvUnlockQueue+0x46>
                    break;
 8000a50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	22ff      	movs	r2, #255	; 0xff
 8000a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000a5a:	f001 fba5 	bl	80021a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a5e:	f001 fb73 	bl	8002148 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a6a:	e011      	b.n	8000a90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d012      	beq.n	8000a9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3310      	adds	r3, #16
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fd87 	bl	800158c <xTaskRemoveFromEventList>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a84:	f000 fecc 	bl	8001820 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dce9      	bgt.n	8000a6c <prvUnlockQueue+0x60>
 8000a98:	e000      	b.n	8000a9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000aa4:	f001 fb80 	bl	80021a8 <vPortExitCritical>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ab8:	f001 fb46 	bl	8002148 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e001      	b.n	8000ace <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ace:	f001 fb6b 	bl	80021a8 <vPortExitCritical>

    return xReturn;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000aec:	f001 fb2c 	bl	8002148 <vPortEnterCritical>
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d103      	bne.n	8000b06 <vQueueWaitForMessageRestricted+0x2a>
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	d103      	bne.n	8000b1c <vQueueWaitForMessageRestricted+0x40>
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b1c:	f001 fb44 	bl	80021a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3324      	adds	r3, #36	; 0x24
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	68b9      	ldr	r1, [r7, #8]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fce5 	bl	8001500 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff68 	bl	8000a0c <prvUnlockQueue>
    }
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	4613      	mov	r3, r2
 8000b52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fbcd 	bl	80022f8 <pvPortMalloc>
 8000b5e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d013      	beq.n	8000b8e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000b66:	2054      	movs	r0, #84	; 0x54
 8000b68:	f001 fbc6 	bl	80022f8 <pvPortMalloc>
 8000b6c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000b74:	2254      	movs	r2, #84	; 0x54
 8000b76:	2100      	movs	r1, #0
 8000b78:	69f8      	ldr	r0, [r7, #28]
 8000b7a:	f003 fcd9 	bl	8004530 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
 8000b84:	e005      	b.n	8000b92 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f001 fc70 	bl	800246c <vPortFree>
 8000b8c:	e001      	b.n	8000b92 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b98:	88fa      	ldrh	r2, [r7, #6]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f80e 	bl	8000bd0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000bb4:	69f8      	ldr	r0, [r7, #28]
 8000bb6:	f000 f891 	bl	8000cdc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	e002      	b.n	8000bc6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000bc6:	69bb      	ldr	r3, [r7, #24]
    }
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000be8:	3b01      	subs	r3, #1
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	f023 0307 	bic.w	r3, r3, #7
 8000bf6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00a      	beq.n	8000c18 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c06:	f383 8811 	msr	BASEPRI, r3
 8000c0a:	f3bf 8f6f 	isb	sy
 8000c0e:	f3bf 8f4f 	dsb	sy
 8000c12:	617b      	str	r3, [r7, #20]
    }
 8000c14:	bf00      	nop
 8000c16:	e7fe      	b.n	8000c16 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01e      	beq.n	8000c5c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e012      	b.n	8000c4a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4413      	add	r3, r2
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4413      	add	r3, r2
 8000c32:	3334      	adds	r3, #52	; 0x34
 8000c34:	460a      	mov	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d9e9      	bls.n	8000c24 <prvInitialiseNewTask+0x54>
 8000c50:	e000      	b.n	8000c54 <prvInitialiseNewTask+0x84>
            {
                break;
 8000c52:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d90a      	bls.n	8000c78 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	f3bf 8f4f 	dsb	sy
 8000c72:	613b      	str	r3, [r7, #16]
    }
 8000c74:	bf00      	nop
 8000c76:	e7fe      	b.n	8000c76 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d901      	bls.n	8000c82 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c90:	3304      	adds	r3, #4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc46 	bl	8000524 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc41 	bl	8000524 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ca6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	f1c3 0205 	rsb	r2, r3, #5
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	68f9      	ldr	r1, [r7, #12]
 8000cbc:	69b8      	ldr	r0, [r7, #24]
 8000cbe:	f001 f917 	bl	8001ef0 <pxPortInitialiseStack>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ce4:	f001 fa30 	bl	8002148 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <prvAddNewTaskToReadyList+0x108>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <prvAddNewTaskToReadyList+0x108>)
 8000cf0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <prvAddNewTaskToReadyList+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d109      	bne.n	8000d0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000cfa:	4a3b      	ldr	r2, [pc, #236]	; (8000de8 <prvAddNewTaskToReadyList+0x10c>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <prvAddNewTaskToReadyList+0x108>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d110      	bne.n	8000d2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000d08:	f000 fdae 	bl	8001868 <prvInitialiseTaskLists>
 8000d0c:	e00d      	b.n	8000d2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <prvAddNewTaskToReadyList+0x110>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <prvAddNewTaskToReadyList+0x10c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d802      	bhi.n	8000d2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000d24:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <prvAddNewTaskToReadyList+0x10c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <prvAddNewTaskToReadyList+0x114>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <prvAddNewTaskToReadyList+0x114>)
 8000d32:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	2201      	movs	r2, #1
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <prvAddNewTaskToReadyList+0x118>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <prvAddNewTaskToReadyList+0x118>)
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4a:	492b      	ldr	r1, [pc, #172]	; (8000df8 <prvAddNewTaskToReadyList+0x11c>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3204      	adds	r2, #4
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	1d1a      	adds	r2, r3, #4
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <prvAddNewTaskToReadyList+0x11c>)
 8000d8a:	441a      	add	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <prvAddNewTaskToReadyList+0x11c>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1c59      	adds	r1, r3, #1
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <prvAddNewTaskToReadyList+0x11c>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4403      	add	r3, r0
 8000db0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000db2:	f001 f9f9 	bl	80021a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <prvAddNewTaskToReadyList+0x110>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00e      	beq.n	8000ddc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <prvAddNewTaskToReadyList+0x10c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <prvAddNewTaskToReadyList+0x120>)
 8000dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	f3bf 8f4f 	dsb	sy
 8000dd8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000dc 	.word	0x200000dc
 8000de8:	20000030 	.word	0x20000030
 8000dec:	200000e8 	.word	0x200000e8
 8000df0:	200000f8 	.word	0x200000f8
 8000df4:	200000e4 	.word	0x200000e4
 8000df8:	20000034 	.word	0x20000034
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <xTaskDelayUntil+0x2a>
        __asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	617b      	str	r3, [r7, #20]
    }
 8000e26:	bf00      	nop
 8000e28:	e7fe      	b.n	8000e28 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10a      	bne.n	8000e46 <xTaskDelayUntil+0x46>
        __asm volatile
 8000e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	613b      	str	r3, [r7, #16]
    }
 8000e42:	bf00      	nop
 8000e44:	e7fe      	b.n	8000e44 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <xTaskDelayUntil+0xf0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00a      	beq.n	8000e64 <xTaskDelayUntil+0x64>
        __asm volatile
 8000e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e52:	f383 8811 	msr	BASEPRI, r3
 8000e56:	f3bf 8f6f 	isb	sy
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	60fb      	str	r3, [r7, #12]
    }
 8000e60:	bf00      	nop
 8000e62:	e7fe      	b.n	8000e62 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8000e64:	f000 f89c 	bl	8000fa0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <xTaskDelayUntil+0xf4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6a3a      	ldr	r2, [r7, #32]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d20b      	bcs.n	8000e9a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d211      	bcs.n	8000eb0 <xTaskDelayUntil+0xb0>
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d90d      	bls.n	8000eb0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
 8000e98:	e00a      	b.n	8000eb0 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d303      	bcc.n	8000eac <xTaskDelayUntil+0xac>
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d901      	bls.n	8000eb0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fd47 	bl	8001958 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000eca:	f000 f877 	bl	8000fbc <xTaskResumeAll>
 8000ece:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d107      	bne.n	8000ee6 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <xTaskDelayUntil+0xf8>)
 8000ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000104 	.word	0x20000104
 8000ef4:	200000e0 	.word	0x200000e0
 8000ef8:	e000ed04 	.word	0xe000ed04

08000efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <vTaskStartScheduler+0x88>)
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2278      	movs	r2, #120	; 0x78
 8000f0e:	491e      	ldr	r1, [pc, #120]	; (8000f88 <vTaskStartScheduler+0x8c>)
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <vTaskStartScheduler+0x90>)
 8000f12:	f7ff fe17 	bl	8000b44 <xTaskCreate>
 8000f16:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000f1e:	f000 fd6f 	bl	8001a00 <xTimerCreateTimerTask>
 8000f22:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d116      	bne.n	8000f58 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	60bb      	str	r3, [r7, #8]
    }
 8000f3c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <vTaskStartScheduler+0x94>)
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <vTaskStartScheduler+0x98>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <vTaskStartScheduler+0x9c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000f52:	f001 f857 	bl	8002004 <xPortStartScheduler>
 8000f56:	e00e      	b.n	8000f76 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5e:	d10a      	bne.n	8000f76 <vTaskStartScheduler+0x7a>
        __asm volatile
 8000f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f64:	f383 8811 	msr	BASEPRI, r3
 8000f68:	f3bf 8f6f 	isb	sy
 8000f6c:	f3bf 8f4f 	dsb	sy
 8000f70:	607b      	str	r3, [r7, #4]
    }
 8000f72:	bf00      	nop
 8000f74:	e7fe      	b.n	8000f74 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <vTaskStartScheduler+0xa0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000100 	.word	0x20000100
 8000f88:	08004558 	.word	0x08004558
 8000f8c:	08001839 	.word	0x08001839
 8000f90:	200000fc 	.word	0x200000fc
 8000f94:	200000e8 	.word	0x200000e8
 8000f98:	200000e0 	.word	0x200000e0
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <vTaskSuspendAll+0x18>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <vTaskSuspendAll+0x18>)
 8000fac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000104 	.word	0x20000104

08000fbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <xTaskResumeAll+0x1d4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10a      	bne.n	8000fe8 <xTaskResumeAll+0x2c>
        __asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	607b      	str	r3, [r7, #4]
    }
 8000fe4:	bf00      	nop
 8000fe6:	e7fe      	b.n	8000fe6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000fe8:	f001 f8ae 	bl	8002148 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <xTaskResumeAll+0x1d4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a67      	ldr	r2, [pc, #412]	; (8001190 <xTaskResumeAll+0x1d4>)
 8000ff4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ff6:	4b66      	ldr	r3, [pc, #408]	; (8001190 <xTaskResumeAll+0x1d4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 80c0 	bne.w	8001180 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <xTaskResumeAll+0x1d8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80bb 	beq.w	8001180 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800100a:	e08a      	b.n	8001122 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800100c:	4b62      	ldr	r3, [pc, #392]	; (8001198 <xTaskResumeAll+0x1dc>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	6a12      	ldr	r2, [r2, #32]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	69d2      	ldr	r2, [r2, #28]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3318      	adds	r3, #24
 8001036:	429a      	cmp	r2, r3
 8001038:	d103      	bne.n	8001042 <xTaskResumeAll+0x86>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	6a1a      	ldr	r2, [r3, #32]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	68d2      	ldr	r2, [r2, #12]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	6892      	ldr	r2, [r2, #8]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3304      	adds	r3, #4
 8001074:	429a      	cmp	r2, r3
 8001076:	d103      	bne.n	8001080 <xTaskResumeAll+0xc4>
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	2201      	movs	r2, #1
 8001096:	409a      	lsls	r2, r3
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <xTaskResumeAll+0x1e0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4313      	orrs	r3, r2
 800109e:	4a3f      	ldr	r2, [pc, #252]	; (800119c <xTaskResumeAll+0x1e0>)
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a6:	493e      	ldr	r1, [pc, #248]	; (80011a0 <xTaskResumeAll+0x1e4>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3304      	adds	r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	3204      	adds	r2, #4
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	1d1a      	adds	r2, r3, #4
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4a2e      	ldr	r2, [pc, #184]	; (80011a0 <xTaskResumeAll+0x1e4>)
 80010e6:	441a      	add	r2, r3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f0:	492b      	ldr	r1, [pc, #172]	; (80011a0 <xTaskResumeAll+0x1e4>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1c59      	adds	r1, r3, #1
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <xTaskResumeAll+0x1e4>)
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4403      	add	r3, r0
 800110c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <xTaskResumeAll+0x1e8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	429a      	cmp	r2, r3
 800111a:	d302      	bcc.n	8001122 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <xTaskResumeAll+0x1ec>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <xTaskResumeAll+0x1dc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f af70 	bne.w	800100c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001132:	f000 fbd7 	bl	80018e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <xTaskResumeAll+0x1f0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d010      	beq.n	8001164 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001142:	f000 f847 	bl	80011d4 <xTaskIncrementTick>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <xTaskResumeAll+0x1ec>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3b01      	subs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f1      	bne.n	8001142 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <xTaskResumeAll+0x1f0>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <xTaskResumeAll+0x1ec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d009      	beq.n	8001180 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800116c:	2301      	movs	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <xTaskResumeAll+0x1f4>)
 8001172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001180:	f001 f812 	bl	80021a8 <vPortExitCritical>

    return xAlreadyYielded;
 8001184:	69bb      	ldr	r3, [r7, #24]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000104 	.word	0x20000104
 8001194:	200000dc 	.word	0x200000dc
 8001198:	200000c8 	.word	0x200000c8
 800119c:	200000e4 	.word	0x200000e4
 80011a0:	20000034 	.word	0x20000034
 80011a4:	20000030 	.word	0x20000030
 80011a8:	200000f0 	.word	0x200000f0
 80011ac:	200000ec 	.word	0x200000ec
 80011b0:	e000ed04 	.word	0xe000ed04

080011b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <xTaskGetTickCount+0x1c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200000e0 	.word	0x200000e0

080011d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <xTaskIncrementTick+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 80ec 	bne.w	80013c0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <xTaskIncrementTick+0x204>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <xTaskIncrementTick+0x204>)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d120      	bne.n	800123e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <xTaskIncrementTick+0x208>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <xTaskIncrementTick+0x48>
        __asm volatile
 8001206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120a:	f383 8811 	msr	BASEPRI, r3
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	607b      	str	r3, [r7, #4]
    }
 8001218:	bf00      	nop
 800121a:	e7fe      	b.n	800121a <xTaskIncrementTick+0x46>
 800121c:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <xTaskIncrementTick+0x208>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <xTaskIncrementTick+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6d      	ldr	r2, [pc, #436]	; (80013dc <xTaskIncrementTick+0x208>)
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <xTaskIncrementTick+0x20c>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <xTaskIncrementTick+0x210>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a6b      	ldr	r2, [pc, #428]	; (80013e4 <xTaskIncrementTick+0x210>)
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	f000 fb53 	bl	80018e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <xTaskIncrementTick+0x214>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6a3a      	ldr	r2, [r7, #32]
 8001244:	429a      	cmp	r2, r3
 8001246:	f0c0 80a6 	bcc.w	8001396 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800124a:	4b64      	ldr	r3, [pc, #400]	; (80013dc <xTaskIncrementTick+0x208>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d104      	bne.n	800125e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <xTaskIncrementTick+0x214>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	601a      	str	r2, [r3, #0]
                    break;
 800125c:	e09b      	b.n	8001396 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800125e:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <xTaskIncrementTick+0x208>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	d203      	bcs.n	800127e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001276:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <xTaskIncrementTick+0x214>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800127c:	e08b      	b.n	8001396 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	68d2      	ldr	r2, [r2, #12]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	6892      	ldr	r2, [r2, #8]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	3304      	adds	r3, #4
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d103      	bne.n	80012ac <xTaskIncrementTick+0xd8>
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d01e      	beq.n	8001302 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	6a12      	ldr	r2, [r2, #32]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	69d2      	ldr	r2, [r2, #28]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	3318      	adds	r3, #24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d103      	bne.n	80012f2 <xTaskIncrementTick+0x11e>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <xTaskIncrementTick+0x218>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a36      	ldr	r2, [pc, #216]	; (80013ec <xTaskIncrementTick+0x218>)
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <xTaskIncrementTick+0x21c>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	3204      	adds	r2, #4
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1d1a      	adds	r2, r3, #4
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <xTaskIncrementTick+0x21c>)
 8001358:	441a      	add	r2, r3
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001362:	4923      	ldr	r1, [pc, #140]	; (80013f0 <xTaskIncrementTick+0x21c>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c59      	adds	r1, r3, #1
 8001372:	481f      	ldr	r0, [pc, #124]	; (80013f0 <xTaskIncrementTick+0x21c>)
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4403      	add	r3, r0
 800137e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <xTaskIncrementTick+0x220>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	429a      	cmp	r2, r3
 800138c:	f67f af5d 	bls.w	800124a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001394:	e759      	b.n	800124a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <xTaskIncrementTick+0x220>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <xTaskIncrementTick+0x21c>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d901      	bls.n	80013b2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <xTaskIncrementTick+0x224>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	e004      	b.n	80013ca <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <xTaskIncrementTick+0x228>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <xTaskIncrementTick+0x228>)
 80013c8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000104 	.word	0x20000104
 80013d8:	200000e0 	.word	0x200000e0
 80013dc:	200000c0 	.word	0x200000c0
 80013e0:	200000c4 	.word	0x200000c4
 80013e4:	200000f4 	.word	0x200000f4
 80013e8:	200000fc 	.word	0x200000fc
 80013ec:	200000e4 	.word	0x200000e4
 80013f0:	20000034 	.word	0x20000034
 80013f4:	20000030 	.word	0x20000030
 80013f8:	200000f0 	.word	0x200000f0
 80013fc:	200000ec 	.word	0x200000ec

08001400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <vTaskSwitchContext+0xa4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <vTaskSwitchContext+0xa8>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001414:	e03f      	b.n	8001496 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <vTaskSwitchContext+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <vTaskSwitchContext+0xac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	f1c3 031f 	rsb	r3, r3, #31
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	491f      	ldr	r1, [pc, #124]	; (80014b0 <vTaskSwitchContext+0xb0>)
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144a:	f383 8811 	msr	BASEPRI, r3
 800144e:	f3bf 8f6f 	isb	sy
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	607b      	str	r3, [r7, #4]
    }
 8001458:	bf00      	nop
 800145a:	e7fe      	b.n	800145a <vTaskSwitchContext+0x5a>
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <vTaskSwitchContext+0xb0>)
 8001468:	4413      	add	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3308      	adds	r3, #8
 800147e:	429a      	cmp	r2, r3
 8001480:	d104      	bne.n	800148c <vTaskSwitchContext+0x8c>
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <vTaskSwitchContext+0xb4>)
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000104 	.word	0x20000104
 80014a8:	200000f0 	.word	0x200000f0
 80014ac:	200000e4 	.word	0x200000e4
 80014b0:	20000034 	.word	0x20000034
 80014b4:	20000030 	.word	0x20000030

080014b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10a      	bne.n	80014de <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80014c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014cc:	f383 8811 	msr	BASEPRI, r3
 80014d0:	f3bf 8f6f 	isb	sy
 80014d4:	f3bf 8f4f 	dsb	sy
 80014d8:	60fb      	str	r3, [r7, #12]
    }
 80014da:	bf00      	nop
 80014dc:	e7fe      	b.n	80014dc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <vTaskPlaceOnEventList+0x44>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3318      	adds	r3, #24
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff f829 	bl	800053e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80014ec:	2101      	movs	r1, #1
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f000 fa32 	bl	8001958 <prvAddCurrentTaskToDelayedList>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000030 	.word	0x20000030

08001500 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001516:	f383 8811 	msr	BASEPRI, r3
 800151a:	f3bf 8f6f 	isb	sy
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	613b      	str	r3, [r7, #16]
    }
 8001524:	bf00      	nop
 8001526:	e7fe      	b.n	8001526 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <vTaskPlaceOnEventListRestricted+0x88>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	61da      	str	r2, [r3, #28]
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <vTaskPlaceOnEventListRestricted+0x88>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	6892      	ldr	r2, [r2, #8]
 800153e:	621a      	str	r2, [r3, #32]
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <vTaskPlaceOnEventListRestricted+0x88>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	3218      	adds	r2, #24
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <vTaskPlaceOnEventListRestricted+0x88>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f103 0218 	add.w	r2, r3, #24
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <vTaskPlaceOnEventListRestricted+0x88>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f000 f9ed 	bl	8001958 <prvAddCurrentTaskToDelayedList>
    }
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000030 	.word	0x20000030

0800158c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800158c:	b480      	push	{r7}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10a      	bne.n	80015b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	60fb      	str	r3, [r7, #12]
    }
 80015b4:	bf00      	nop
 80015b6:	e7fe      	b.n	80015b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	6a3a      	ldr	r2, [r7, #32]
 80015c4:	6a12      	ldr	r2, [r2, #32]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	69d2      	ldr	r2, [r2, #28]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	3318      	adds	r3, #24
 80015da:	429a      	cmp	r2, r3
 80015dc:	d103      	bne.n	80015e6 <xTaskRemoveFromEventList+0x5a>
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <xTaskRemoveFromEventList+0x194>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d15e      	bne.n	80016bc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68d2      	ldr	r2, [r2, #12]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	6892      	ldr	r2, [r2, #8]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	3304      	adds	r3, #4
 8001620:	429a      	cmp	r2, r3
 8001622:	d103      	bne.n	800162c <xTaskRemoveFromEventList+0xa0>
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <xTaskRemoveFromEventList+0x198>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4313      	orrs	r3, r2
 800164a:	4a36      	ldr	r2, [pc, #216]	; (8001724 <xTaskRemoveFromEventList+0x198>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001652:	4935      	ldr	r1, [pc, #212]	; (8001728 <xTaskRemoveFromEventList+0x19c>)
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	6a3a      	ldr	r2, [r7, #32]
 8001678:	3204      	adds	r2, #4
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <xTaskRemoveFromEventList+0x19c>)
 8001692:	441a      	add	r2, r3
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	4922      	ldr	r1, [pc, #136]	; (8001728 <xTaskRemoveFromEventList+0x19c>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1c59      	adds	r1, r3, #1
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <xTaskRemoveFromEventList+0x19c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4403      	add	r3, r0
 80016b8:	6019      	str	r1, [r3, #0]
 80016ba:	e01b      	b.n	80016f4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <xTaskRemoveFromEventList+0x1a0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	61da      	str	r2, [r3, #28]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	621a      	str	r2, [r3, #32]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	3218      	adds	r2, #24
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f103 0218 	add.w	r2, r3, #24
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <xTaskRemoveFromEventList+0x1a0>)
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <xTaskRemoveFromEventList+0x1a0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <xTaskRemoveFromEventList+0x1a0>)
 80016f2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <xTaskRemoveFromEventList+0x1a4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	429a      	cmp	r2, r3
 8001700:	d905      	bls.n	800170e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <xTaskRemoveFromEventList+0x1a8>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e001      	b.n	8001712 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001714:	4618      	mov	r0, r3
 8001716:	372c      	adds	r7, #44	; 0x2c
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000104 	.word	0x20000104
 8001724:	200000e4 	.word	0x200000e4
 8001728:	20000034 	.word	0x20000034
 800172c:	200000c8 	.word	0x200000c8
 8001730:	20000030 	.word	0x20000030
 8001734:	200000f0 	.word	0x200000f0

08001738 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <vTaskInternalSetTimeOutState+0x24>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <vTaskInternalSetTimeOutState+0x28>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	200000f4 	.word	0x200000f4
 8001760:	200000e0 	.word	0x200000e0

08001764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10a      	bne.n	800178a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001778:	f383 8811 	msr	BASEPRI, r3
 800177c:	f3bf 8f6f 	isb	sy
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	613b      	str	r3, [r7, #16]
    }
 8001786:	bf00      	nop
 8001788:	e7fe      	b.n	8001788 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	60fb      	str	r3, [r7, #12]
    }
 80017a2:	bf00      	nop
 80017a4:	e7fe      	b.n	80017a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80017a6:	f000 fccf 	bl	8002148 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <xTaskCheckForTimeOut+0xb4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <xTaskCheckForTimeOut+0xb8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d00a      	beq.n	80017dc <xTaskCheckForTimeOut+0x78>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d305      	bcc.n	80017dc <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e015      	b.n	8001808 <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20b      	bcs.n	80017fe <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	1ad2      	subs	r2, r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa0 	bl	8001738 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e004      	b.n	8001808 <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001804:	2301      	movs	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001808:	f000 fcce 	bl	80021a8 <vPortExitCritical>

    return xReturn;
 800180c:	69fb      	ldr	r3, [r7, #28]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000e0 	.word	0x200000e0
 800181c:	200000f4 	.word	0x200000f4

08001820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <vTaskMissedYield+0x14>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	200000f0 	.word	0x200000f0

08001838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001840:	f000 f848 	bl	80018d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <prvIdleTask+0x28>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d9f9      	bls.n	8001840 <prvIdleTask+0x8>
            {
                taskYIELD();
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <prvIdleTask+0x2c>)
 800184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800185c:	e7f0      	b.n	8001840 <prvIdleTask+0x8>
 800185e:	bf00      	nop
 8001860:	20000034 	.word	0x20000034
 8001864:	e000ed04 	.word	0xe000ed04

08001868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	e00c      	b.n	800188e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <prvInitialiseTaskLists+0x54>)
 8001880:	4413      	add	r3, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe2e 	bl	80004e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3301      	adds	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d9ef      	bls.n	8001874 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001894:	480a      	ldr	r0, [pc, #40]	; (80018c0 <prvInitialiseTaskLists+0x58>)
 8001896:	f7fe fe25 	bl	80004e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <prvInitialiseTaskLists+0x5c>)
 800189c:	f7fe fe22 	bl	80004e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <prvInitialiseTaskLists+0x60>)
 80018a2:	f7fe fe1f 	bl	80004e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <prvInitialiseTaskLists+0x64>)
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <prvInitialiseTaskLists+0x58>)
 80018aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <prvInitialiseTaskLists+0x68>)
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <prvInitialiseTaskLists+0x5c>)
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000034 	.word	0x20000034
 80018c0:	20000098 	.word	0x20000098
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	200000c8 	.word	0x200000c8
 80018cc:	200000c0 	.word	0x200000c0
 80018d0:	200000c4 	.word	0x200000c4

080018d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <prvResetNextTaskUnblockTime+0x30>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <prvResetNextTaskUnblockTime+0x34>)
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018fa:	e005      	b.n	8001908 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <prvResetNextTaskUnblockTime+0x30>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <prvResetNextTaskUnblockTime+0x34>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200000c0 	.word	0x200000c0
 8001918:	200000fc 	.word	0x200000fc

0800191c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <xTaskGetSchedulerState+0x34>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e008      	b.n	8001942 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <xTaskGetSchedulerState+0x38>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001938:	2302      	movs	r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001942:	687b      	ldr	r3, [r7, #4]
    }
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	200000e8 	.word	0x200000e8
 8001954:	20000104 	.word	0x20000104

08001958 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <prvAddCurrentTaskToDelayedList+0x94>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe1e 	bl	80005b0 <uxListRemove>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10b      	bne.n	8001992 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <prvAddCurrentTaskToDelayedList+0x94>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	2201      	movs	r2, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4013      	ands	r3, r2
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <prvAddCurrentTaskToDelayedList+0x98>)
 8001990:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <prvAddCurrentTaskToDelayedList+0x94>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d209      	bcs.n	80019be <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <prvAddCurrentTaskToDelayedList+0x94>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7fe fdc1 	bl	800053e <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80019bc:	e010      	b.n	80019e0 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <prvAddCurrentTaskToDelayedList+0x94>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7fe fdb7 	bl	800053e <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d202      	bcs.n	80019e0 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000e0 	.word	0x200000e0
 80019ec:	20000030 	.word	0x20000030
 80019f0:	200000e4 	.word	0x200000e4
 80019f4:	200000c4 	.word	0x200000c4
 80019f8:	200000c0 	.word	0x200000c0
 80019fc:	200000fc 	.word	0x200000fc

08001a00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001a0a:	f000 fa47 	bl	8001e9c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <xTimerCreateTimerTask+0x54>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <xTimerCreateTimerTask+0x58>)
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2278      	movs	r2, #120	; 0x78
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <xTimerCreateTimerTask+0x5c>)
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <xTimerCreateTimerTask+0x60>)
 8001a26:	f7ff f88d 	bl	8000b44 <xTaskCreate>
 8001a2a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8001a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a36:	f383 8811 	msr	BASEPRI, r3
 8001a3a:	f3bf 8f6f 	isb	sy
 8001a3e:	f3bf 8f4f 	dsb	sy
 8001a42:	603b      	str	r3, [r7, #0]
    }
 8001a44:	bf00      	nop
 8001a46:	e7fe      	b.n	8001a46 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8001a48:	687b      	ldr	r3, [r7, #4]
    }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000138 	.word	0x20000138
 8001a58:	2000013c 	.word	0x2000013c
 8001a5c:	08004560 	.word	0x08004560
 8001a60:	08001b09 	.word	0x08001b09

08001a64 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001a70:	e008      	b.n	8001a84 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	4413      	add	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	18d1      	adds	r1, r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f8dd 	bl	8001c50 <prvInsertTimerInActiveList>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ea      	bne.n	8001a72 <prvReloadTimer+0xe>
        }
    }
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <prvProcessExpiredTimer+0x5c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd75 	bl	80005b0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff ffc3 	bl	8001a64 <prvReloadTimer>
 8001ade:	e008      	b.n	8001af2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	4798      	blx	r3
    }
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000130 	.word	0x20000130

08001b08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f857 	bl	8001bc8 <prvGetNextExpireTime>
 8001b1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f803 	bl	8001b2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001b26:	f000 f8d5 	bl	8001cd4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b2a:	e7f1      	b.n	8001b10 <prvTimerTask+0x8>

08001b2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001b36:	f7ff fa33 	bl	8000fa0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f866 	bl	8001c10 <prvSampleTimeNow>
 8001b44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d130      	bne.n	8001bae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <prvProcessTimerOrBlockTask+0x3c>
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d806      	bhi.n	8001b68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001b5a:	f7ff fa2f 	bl	8000fbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffa1 	bl	8001aa8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001b66:	e024      	b.n	8001bb2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <prvProcessTimerOrBlockTask+0x90>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <prvProcessTimerOrBlockTask+0x50>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <prvProcessTimerOrBlockTask+0x52>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <prvProcessTimerOrBlockTask+0x94>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ffa5 	bl	8000adc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001b92:	f7ff fa13 	bl	8000fbc <xTaskResumeAll>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <prvProcessTimerOrBlockTask+0x98>)
 8001b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f3bf 8f4f 	dsb	sy
 8001ba8:	f3bf 8f6f 	isb	sy
    }
 8001bac:	e001      	b.n	8001bb2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001bae:	f7ff fa05 	bl	8000fbc <xTaskResumeAll>
    }
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000134 	.word	0x20000134
 8001bc0:	20000138 	.word	0x20000138
 8001bc4:	e000ed04 	.word	0xe000ed04

08001bc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <prvGetNextExpireTime+0x44>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <prvGetNextExpireTime+0x16>
 8001bda:	2201      	movs	r2, #1
 8001bdc:	e000      	b.n	8001be0 <prvGetNextExpireTime+0x18>
 8001bde:	2200      	movs	r2, #0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <prvGetNextExpireTime+0x44>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e001      	b.n	8001bfc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000130 	.word	0x20000130

08001c10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001c18:	f7ff facc 	bl	80011b4 <xTaskGetTickCount>
 8001c1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <prvSampleTimeNow+0x3c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d205      	bcs.n	8001c34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001c28:	f000 f912 	bl	8001e50 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <prvSampleTimeNow+0x3c>)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001c40:	68fb      	ldr	r3, [r7, #12]
    }
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000140 	.word	0x20000140

08001c50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d812      	bhi.n	8001c9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	1ad2      	subs	r2, r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d302      	bcc.n	8001c8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e01b      	b.n	8001cc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <prvInsertTimerInActiveList+0x7c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3304      	adds	r3, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f7fe fc52 	bl	800053e <vListInsert>
 8001c9a:	e012      	b.n	8001cc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d206      	bcs.n	8001cb2 <prvInsertTimerInActiveList+0x62>
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d302      	bcc.n	8001cb2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e007      	b.n	8001cc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <prvInsertTimerInActiveList+0x80>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f7fe fc3e 	bl	800053e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001cc2:	697b      	ldr	r3, [r7, #20]
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000134 	.word	0x20000134
 8001cd0:	20000130 	.word	0x20000130

08001cd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001cda:	e0a6      	b.n	8001e2a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f2c0 80a2 	blt.w	8001e28 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc5b 	bl	80005b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff87 	bl	8001c10 <prvSampleTimeNow>
 8001d02:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f200 808e 	bhi.w	8001e2a <prvProcessReceivedCommands+0x156>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <prvProcessReceivedCommands+0x40>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d39 	.word	0x08001d39
 8001d18:	08001d39 	.word	0x08001d39
 8001d1c:	08001da1 	.word	0x08001da1
 8001d20:	08001db5 	.word	0x08001db5
 8001d24:	08001dff 	.word	0x08001dff
 8001d28:	08001d39 	.word	0x08001d39
 8001d2c:	08001d39 	.word	0x08001d39
 8001d30:	08001da1 	.word	0x08001da1
 8001d34:	08001db5 	.word	0x08001db5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	18d1      	adds	r1, r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	69f8      	ldr	r0, [r7, #28]
 8001d58:	f7ff ff7a 	bl	8001c50 <prvInsertTimerInActiveList>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4413      	add	r3, r2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	69f8      	ldr	r0, [r7, #28]
 8001d7e:	f7ff fe71 	bl	8001a64 <prvReloadTimer>
 8001d82:	e008      	b.n	8001d96 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	69f8      	ldr	r0, [r7, #28]
 8001d9c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001d9e:	e044      	b.n	8001e2a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8001db2:	e03a      	b.n	8001e2a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	617b      	str	r3, [r7, #20]
    }
 8001de6:	bf00      	nop
 8001de8:	e7fe      	b.n	8001de8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	18d1      	adds	r1, r2, r3
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69f8      	ldr	r0, [r7, #28]
 8001df8:	f7ff ff2a 	bl	8001c50 <prvInsertTimerInActiveList>
                        break;
 8001dfc:	e015      	b.n	8001e2a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001e0c:	69f8      	ldr	r0, [r7, #28]
 8001e0e:	f000 fb2d 	bl	800246c <vPortFree>
 8001e12:	e00a      	b.n	8001e2a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001e26:	e000      	b.n	8001e2a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001e28:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <prvProcessReceivedCommands+0x178>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	2200      	movs	r2, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fce3 	bl	8000800 <xQueueReceive>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f af4d 	bne.w	8001cdc <prvProcessReceivedCommands+0x8>
        }
    }
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000138 	.word	0x20000138

08001e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e56:	e009      	b.n	8001e6c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <prvSwitchTimerLists+0x44>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001e62:	f04f 31ff 	mov.w	r1, #4294967295
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f7ff fe1e 	bl	8001aa8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <prvSwitchTimerLists+0x44>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <prvSwitchTimerLists+0x44>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <prvSwitchTimerLists+0x48>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <prvSwitchTimerLists+0x44>)
 8001e82:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <prvSwitchTimerLists+0x48>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
    }
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000130 	.word	0x20000130
 8001e98:	20000134 	.word	0x20000134

08001e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001ea0:	f000 f952 	bl	8002148 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <prvCheckForValidListAndQueue+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d113      	bne.n	8001ed4 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <prvCheckForValidListAndQueue+0x44>)
 8001eae:	f7fe fb19 	bl	80004e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <prvCheckForValidListAndQueue+0x48>)
 8001eb4:	f7fe fb16 	bl	80004e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <prvCheckForValidListAndQueue+0x4c>)
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <prvCheckForValidListAndQueue+0x44>)
 8001ebc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <prvCheckForValidListAndQueue+0x50>)
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <prvCheckForValidListAndQueue+0x48>)
 8001ec2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	210c      	movs	r1, #12
 8001ec8:	2005      	movs	r0, #5
 8001eca:	f7fe fc2b 	bl	8000724 <xQueueGenericCreate>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a02      	ldr	r2, [pc, #8]	; (8001edc <prvCheckForValidListAndQueue+0x40>)
 8001ed2:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001ed4:	f000 f968 	bl	80021a8 <vPortExitCritical>
    }
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000138 	.word	0x20000138
 8001ee0:	20000108 	.word	0x20000108
 8001ee4:	2000011c 	.word	0x2000011c
 8001ee8:	20000130 	.word	0x20000130
 8001eec:	20000134 	.word	0x20000134

08001ef0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b04      	subs	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3b04      	subs	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f023 0201 	bic.w	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3b04      	subs	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <pxPortInitialiseStack+0x64>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3b14      	subs	r3, #20
 8001f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3b04      	subs	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f06f 0202 	mvn.w	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b20      	subs	r3, #32
 8001f44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	08001f59 	.word	0x08001f59

08001f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <prvTaskExitError+0x54>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d00a      	beq.n	8001f82 <prvTaskExitError+0x2a>
        __asm volatile
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	f383 8811 	msr	BASEPRI, r3
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	f3bf 8f4f 	dsb	sy
 8001f7c:	60fb      	str	r3, [r7, #12]
    }
 8001f7e:	bf00      	nop
 8001f80:	e7fe      	b.n	8001f80 <prvTaskExitError+0x28>
        __asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	60bb      	str	r3, [r7, #8]
    }
 8001f94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001f96:	bf00      	nop
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0fc      	beq.n	8001f98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20000004 	.word	0x20000004

08001fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <pxCurrentTCBConst2>)
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	6808      	ldr	r0, [r1, #0]
 8001fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fba:	f380 8809 	msr	PSP, r0
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f380 8811 	msr	BASEPRI, r0
 8001fca:	4770      	bx	lr
 8001fcc:	f3af 8000 	nop.w

08001fd0 <pxCurrentTCBConst2>:
 8001fd0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop

08001fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001fd8:	4808      	ldr	r0, [pc, #32]	; (8001ffc <prvPortStartFirstTask+0x24>)
 8001fda:	6800      	ldr	r0, [r0, #0]
 8001fdc:	6800      	ldr	r0, [r0, #0]
 8001fde:	f380 8808 	msr	MSP, r0
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f380 8814 	msr	CONTROL, r0
 8001fea:	b662      	cpsie	i
 8001fec:	b661      	cpsie	f
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	df00      	svc	0
 8001ff8:	bf00      	nop
 8001ffa:	0000      	.short	0x0000
 8001ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop

08002004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <xPortStartScheduler+0x120>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a46      	ldr	r2, [pc, #280]	; (8002128 <xPortStartScheduler+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d10a      	bne.n	800202a <xPortStartScheduler+0x26>
        __asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	613b      	str	r3, [r7, #16]
    }
 8002026:	bf00      	nop
 8002028:	e7fe      	b.n	8002028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <xPortStartScheduler+0x120>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3f      	ldr	r2, [pc, #252]	; (800212c <xPortStartScheduler+0x128>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10a      	bne.n	800204a <xPortStartScheduler+0x46>
        __asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	60fb      	str	r3, [r7, #12]
    }
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <xPortStartScheduler+0x12c>)
 800204c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <xPortStartScheduler+0x130>)
 8002070:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <xPortStartScheduler+0x134>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002078:	e009      	b.n	800208e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <xPortStartScheduler+0x134>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3b01      	subs	r3, #1
 8002080:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <xPortStartScheduler+0x134>)
 8002082:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d0ef      	beq.n	800207a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <xPortStartScheduler+0x134>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d00a      	beq.n	80020bc <xPortStartScheduler+0xb8>
        __asm volatile
 80020a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	60bb      	str	r3, [r7, #8]
    }
 80020b8:	bf00      	nop
 80020ba:	e7fe      	b.n	80020ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <xPortStartScheduler+0x134>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <xPortStartScheduler+0x134>)
 80020c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <xPortStartScheduler+0x134>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020ce:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <xPortStartScheduler+0x134>)
 80020d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <xPortStartScheduler+0x138>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <xPortStartScheduler+0x138>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <xPortStartScheduler+0x138>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <xPortStartScheduler+0x138>)
 80020ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80020f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80020f2:	f000 f8db 	bl	80022ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <xPortStartScheduler+0x13c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80020fc:	f000 f8f0 	bl	80022e0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <xPortStartScheduler+0x140>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <xPortStartScheduler+0x140>)
 8002106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800210a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800210c:	f7ff ff64 	bl	8001fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002110:	f7ff f976 	bl	8001400 <vTaskSwitchContext>
    prvTaskExitError();
 8002114:	f7ff ff20 	bl	8001f58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	410fc271 	.word	0x410fc271
 800212c:	410fc270 	.word	0x410fc270
 8002130:	e000e400 	.word	0xe000e400
 8002134:	20000144 	.word	0x20000144
 8002138:	20000148 	.word	0x20000148
 800213c:	e000ed20 	.word	0xe000ed20
 8002140:	20000004 	.word	0x20000004
 8002144:	e000ef34 	.word	0xe000ef34

08002148 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
        __asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	607b      	str	r3, [r7, #4]
    }
 8002160:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <vPortEnterCritical+0x58>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <vPortEnterCritical+0x58>)
 800216a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <vPortEnterCritical+0x58>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10f      	bne.n	8002194 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <vPortEnterCritical+0x5c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <vPortEnterCritical+0x4c>
        __asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	603b      	str	r3, [r7, #0]
    }
 8002190:	bf00      	nop
 8002192:	e7fe      	b.n	8002192 <vPortEnterCritical+0x4a>
    }
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000004 	.word	0x20000004
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <vPortExitCritical+0x50>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <vPortExitCritical+0x24>
        __asm volatile
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	607b      	str	r3, [r7, #4]
    }
 80021c8:	bf00      	nop
 80021ca:	e7fe      	b.n	80021ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <vPortExitCritical+0x50>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <vPortExitCritical+0x50>)
 80021d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <vPortExitCritical+0x50>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <vPortExitCritical+0x42>
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80021e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000004 	.word	0x20000004
 80021fc:	00000000 	.word	0x00000000

08002200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002200:	f3ef 8009 	mrs	r0, PSP
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <pxCurrentTCBConst>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	f01e 0f10 	tst.w	lr, #16
 8002210:	bf08      	it	eq
 8002212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221a:	6010      	str	r0, [r2, #0]
 800221c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002224:	f380 8811 	msr	BASEPRI, r0
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f7ff f8e6 	bl	8001400 <vTaskSwitchContext>
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f380 8811 	msr	BASEPRI, r0
 800223c:	bc09      	pop	{r0, r3}
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6808      	ldr	r0, [r1, #0]
 8002242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002246:	f01e 0f10 	tst.w	lr, #16
 800224a:	bf08      	it	eq
 800224c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002250:	f380 8809 	msr	PSP, r0
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w

08002260 <pxCurrentTCBConst>:
 8002260:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop

08002268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
        __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	607b      	str	r3, [r7, #4]
    }
 8002280:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002282:	f7fe ffa7 	bl	80011d4 <xTaskIncrementTick>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <SysTick_Handler+0x40>)
 800228e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f383 8811 	msr	BASEPRI, r3
    }
 800229e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	e000ed04 	.word	0xe000ed04

080022ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <vPortSetupTimerInterrupt+0x28>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <vPortSetupTimerInterrupt+0x2c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <vPortSetupTimerInterrupt+0x30>)
 80022be:	f242 720f 	movw	r2, #9999	; 0x270f
 80022c2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <vPortSetupTimerInterrupt+0x28>)
 80022c6:	2203      	movs	r2, #3
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e010 	.word	0xe000e010
 80022d8:	e000e018 	.word	0xe000e018
 80022dc:	e000e014 	.word	0xe000e014

080022e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80022e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80022f0 <vPortEnableVFP+0x10>
 80022e4:	6801      	ldr	r1, [r0, #0]
 80022e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022ea:	6001      	str	r1, [r0, #0]
 80022ec:	4770      	bx	lr
 80022ee:	0000      	.short	0x0000
 80022f0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop

080022f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002304:	f7fe fe4c 	bl	8000fa0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002308:	4b53      	ldr	r3, [pc, #332]	; (8002458 <pvPortMalloc+0x160>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002310:	f000 f908 	bl	8002524 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800231a:	2208      	movs	r2, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	3308      	adds	r3, #8
 8002326:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d804      	bhi.n	800233c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	e001      	b.n	8002340 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db70      	blt.n	8002428 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d06d      	beq.n	8002428 <pvPortMalloc+0x130>
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <pvPortMalloc+0x164>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d868      	bhi.n	8002428 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <pvPortMalloc+0x168>)
 8002358:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <pvPortMalloc+0x168>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002360:	e004      	b.n	800236c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d903      	bls.n	800237e <pvPortMalloc+0x86>
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f1      	bne.n	8002362 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <pvPortMalloc+0x160>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	429a      	cmp	r2, r3
 8002386:	d04f      	beq.n	8002428 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2208      	movs	r2, #8
 800238e:	4413      	add	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	2308      	movs	r3, #8
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d91f      	bls.n	80023ea <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <pvPortMalloc+0xda>
        __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	613b      	str	r3, [r7, #16]
    }
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f000 f8f9 	bl	80025dc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <pvPortMalloc+0x164>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <pvPortMalloc+0x164>)
 80023f6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <pvPortMalloc+0x164>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <pvPortMalloc+0x16c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d203      	bcs.n	800240c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <pvPortMalloc+0x164>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <pvPortMalloc+0x16c>)
 800240a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <pvPortMalloc+0x170>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a10      	ldr	r2, [pc, #64]	; (8002468 <pvPortMalloc+0x170>)
 8002426:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002428:	f7fe fdc8 	bl	8000fbc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <pvPortMalloc+0x154>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60fb      	str	r3, [r7, #12]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <pvPortMalloc+0x152>
    return pvReturn;
 800244c:	69fb      	ldr	r3, [r7, #28]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20002954 	.word	0x20002954
 800245c:	20002958 	.word	0x20002958
 8002460:	2000294c 	.word	0x2000294c
 8002464:	2000295c 	.word	0x2000295c
 8002468:	20002960 	.word	0x20002960

0800246c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d049      	beq.n	8002512 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800247e:	2308      	movs	r3, #8
 8002480:	425b      	negs	r3, r3
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4413      	add	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <vPortFree+0x3e>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	60fb      	str	r3, [r7, #12]
    }
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <vPortFree+0x5c>
        __asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	60bb      	str	r3, [r7, #8]
    }
 80024c4:	bf00      	nop
 80024c6:	e7fe      	b.n	80024c6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0fdb      	lsrs	r3, r3, #31
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01c      	beq.n	8002512 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d118      	bne.n	8002512 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80024ec:	f7fe fd58 	bl	8000fa0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <vPortFree+0xb0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <vPortFree+0xb0>)
 80024fc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024fe:	6938      	ldr	r0, [r7, #16]
 8002500:	f000 f86c 	bl	80025dc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <vPortFree+0xb4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <vPortFree+0xb4>)
 800250c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800250e:	f7fe fd55 	bl	8000fbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20002958 	.word	0x20002958
 8002520:	20002964 	.word	0x20002964

08002524 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800252a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800252e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <prvHeapInit+0xa4>)
 8002532:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3307      	adds	r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <prvHeapInit+0xa4>)
 8002554:	4413      	add	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <prvHeapInit+0xa8>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <prvHeapInit+0xa8>)
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002570:	2208      	movs	r2, #8
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0307 	bic.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <prvHeapInit+0xac>)
 8002584:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <prvHeapInit+0xac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <prvHeapInit+0xac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <prvHeapInit+0xac>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <prvHeapInit+0xb0>)
 80025b2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <prvHeapInit+0xb4>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	2000014c 	.word	0x2000014c
 80025cc:	2000294c 	.word	0x2000294c
 80025d0:	20002954 	.word	0x20002954
 80025d4:	2000295c 	.word	0x2000295c
 80025d8:	20002958 	.word	0x20002958

080025dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <prvInsertBlockIntoFreeList+0xac>)
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e002      	b.n	80025f0 <prvInsertBlockIntoFreeList+0x14>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d8f7      	bhi.n	80025ea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d108      	bne.n	800261e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	441a      	add	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	441a      	add	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d118      	bne.n	8002664 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <prvInsertBlockIntoFreeList+0xb0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d00d      	beq.n	800265a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e008      	b.n	800266c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <prvInsertBlockIntoFreeList+0xb0>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e003      	b.n	800266c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d002      	beq.n	800267a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000294c 	.word	0x2000294c
 800268c:	20002954 	.word	0x20002954

08002690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002696:	f000 fa71 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269a:	f000 f815 	bl	80026c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269e:	f000 f8a5 	bl	80027ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026a2:	f000 f879 	bl	8002798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(led_toggle_task, "Toggle GPIO13", 128, NULL, 1, NULL);
 80026a6:	2300      	movs	r3, #0
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	4903      	ldr	r1, [pc, #12]	; (80026c0 <main+0x30>)
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <main+0x34>)
 80026b6:	f7fe fa45 	bl	8000b44 <xTaskCreate>

  vTaskStartScheduler();
 80026ba:	f7fe fc1f 	bl	8000efc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026be:	e7fe      	b.n	80026be <main+0x2e>
 80026c0:	08004568 	.word	0x08004568
 80026c4:	08002891 	.word	0x08002891

080026c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b094      	sub	sp, #80	; 0x50
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 0320 	add.w	r3, r7, #32
 80026d2:	2230      	movs	r2, #48	; 0x30
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 ff2a 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <SystemClock_Config+0xc8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <SystemClock_Config+0xc8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <SystemClock_Config+0xc8>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <SystemClock_Config+0xcc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <SystemClock_Config+0xcc>)
 8002712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <SystemClock_Config+0xcc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002724:	2301      	movs	r3, #1
 8002726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272e:	2302      	movs	r3, #2
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002738:	230c      	movs	r3, #12
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800273c:	2360      	movs	r3, #96	; 0x60
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002740:	2302      	movs	r3, #2
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002744:	2304      	movs	r3, #4
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fcf1 	bl	8003134 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002758:	f000 f8cc 	bl	80028f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275c:	230f      	movs	r3, #15
 800275e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002760:	2302      	movs	r3, #2
 8002762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2103      	movs	r1, #3
 8002778:	4618      	mov	r0, r3
 800277a:	f000 ff53 	bl	8003624 <HAL_RCC_ClockConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002784:	f000 f8b6 	bl	80028f4 <Error_Handler>
  }
}
 8002788:	bf00      	nop
 800278a:	3750      	adds	r7, #80	; 0x50
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000

08002798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <MX_USART2_UART_Init+0x50>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027d0:	f001 fbba 	bl	8003f48 <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027da:	f000 f88b 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20002968 	.word	0x20002968
 80027e8:	40004400 	.word	0x40004400

080027ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <MX_GPIO_Init+0x9c>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a18      	ldr	r2, [pc, #96]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <MX_GPIO_Init+0x9c>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_GPIO_Init+0x9c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <MX_GPIO_Init+0xa0>)
 800285e:	f000 fc35 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8002862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	4619      	mov	r1, r3
 800287a:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_GPIO_Init+0xa0>)
 800287c:	f000 faa2 	bl	8002dc4 <HAL_GPIO_Init>

}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	40020800 	.word	0x40020800

08002890 <led_toggle_task>:

/* USER CODE BEGIN 4 */
static void led_toggle_task(void *parameter)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	 TickType_t xLastWakeTime;
	 const TickType_t xPeriod = 1000;
 8002898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289c:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <led_toggle_task+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	099a      	lsrs	r2, r3, #6
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe faa2 	bl	8000e00 <xTaskDelayUntil>

		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80028bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <led_toggle_task+0x3c>)
 80028c2:	f000 fc1c 	bl	80030fe <HAL_GPIO_TogglePin>
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 80028c6:	e7ea      	b.n	800289e <led_toggle_task+0xe>
 80028c8:	10624dd3 	.word	0x10624dd3
 80028cc:	40020800 	.word	0x40020800

080028d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80028e2:	f000 f96d 	bl	8002bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40014400 	.word	0x40014400

080028f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
}
 80028fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028fc:	e7fe      	b.n	80028fc <Error_Handler+0x8>
	...

08002900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_MspInit+0x4c>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_MspInit+0x4c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_MspInit+0x4c>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_MspInit+0x4c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_UART_MspInit+0x84>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12b      	bne.n	80029ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_MspInit+0x88>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_UART_MspInit+0x88>)
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_UART_MspInit+0x88>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_UART_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_UART_MspInit+0x88>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_UART_MspInit+0x88>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029aa:	230c      	movs	r3, #12
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ba:	2307      	movs	r3, #7
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_UART_MspInit+0x8c>)
 80029c6:	f000 f9fd 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ca:	bf00      	nop
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020000 	.word	0x40020000

080029e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_InitTick+0xd0>)
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <HAL_InitTick+0xd0>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_InitTick+0xd0>)
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a0c:	f107 020c 	add.w	r2, r7, #12
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ffe4 	bl	80039e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a1c:	f000 ffce 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8002a20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_InitTick+0xd4>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a32:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_InitTick+0xdc>)
 8002a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a3c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002a56:	4818      	ldr	r0, [pc, #96]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a58:	f000 fff6 	bl	8003a48 <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11b      	bne.n	8002aa2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002a6a:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <HAL_InitTick+0xd8>)
 8002a6c:	f001 f846 	bl	8003afc <HAL_TIM_Base_Start_IT>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d111      	bne.n	8002aa2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a7e:	2019      	movs	r0, #25
 8002a80:	f000 f992 	bl	8002da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d808      	bhi.n	8002a9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	2019      	movs	r0, #25
 8002a90:	f000 f96e 	bl	8002d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_InitTick+0xe0>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e002      	b.n	8002aa2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3730      	adds	r7, #48	; 0x30
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	200029ac 	.word	0x200029ac
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <NMI_Handler+0x4>

08002aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <BusFault_Handler+0x4>

08002adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <UsageFault_Handler+0x4>

08002ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002af6:	f001 f863 	bl	8003bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200029ac 	.word	0x200029ac

08002b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <SystemInit+0x20>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <SystemInit+0x20>)
 8002b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b2e:	490e      	ldr	r1, [pc, #56]	; (8002b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b34:	e002      	b.n	8002b3c <LoopCopyDataInit>

08002b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3a:	3304      	adds	r3, #4

08002b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b40:	d3f9      	bcc.n	8002b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b44:	4c0b      	ldr	r4, [pc, #44]	; (8002b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b48:	e001      	b.n	8002b4e <LoopFillZerobss>

08002b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b4c:	3204      	adds	r2, #4

08002b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b50:	d3fb      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b52:	f7ff ffd7 	bl	8002b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b56:	f001 fcb9 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5a:	f7ff fd99 	bl	8002690 <main>
  bx  lr    
 8002b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002b6c:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 8002b70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002b74:	200029f8 	.word	0x200029f8

08002b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC_IRQHandler>
	...

08002b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_Init+0x40>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_Init+0x40>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_Init+0x40>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f8d8 	bl	8002d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002baa:	200f      	movs	r0, #15
 8002bac:	f7ff ff18 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7ff fea6 	bl	8002900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x20>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x24>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_IncTick+0x24>)
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000010 	.word	0x20000010
 8002be4:	200029f4 	.word	0x200029f4

08002be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return uwTick;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_GetTick+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	200029f4 	.word	0x200029f4

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff4c 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d82:	f7ff ff61 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	6978      	ldr	r0, [r7, #20]
 8002d8e:	f7ff ffb1 	bl	8002cf4 <NVIC_EncodePriority>
 8002d92:	4602      	mov	r2, r0
 8002d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff80 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002da0:	bf00      	nop
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff54 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e159      	b.n	8003094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de0:	2201      	movs	r2, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f040 8148 	bne.w	800308e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d005      	beq.n	8002e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d130      	bne.n	8002e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 0201 	and.w	r2, r3, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d017      	beq.n	8002eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d123      	bne.n	8002f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	08da      	lsrs	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3208      	adds	r2, #8
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a2 	beq.w	800308e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_GPIO_Init+0x2e8>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_GPIO_Init+0x2e8>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b54      	ldr	r3, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x2e8>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f66:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_GPIO_Init+0x2ec>)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a49      	ldr	r2, [pc, #292]	; (80030b4 <HAL_GPIO_Init+0x2f0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x202>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a48      	ldr	r2, [pc, #288]	; (80030b8 <HAL_GPIO_Init+0x2f4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x1fe>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a47      	ldr	r2, [pc, #284]	; (80030bc <HAL_GPIO_Init+0x2f8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x1fa>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_GPIO_Init+0x2fc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x1f6>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_GPIO_Init+0x300>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x1f2>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x204>
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x204>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x204>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x204>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x204>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	; (80030b0 <HAL_GPIO_Init+0x2ec>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_GPIO_Init+0x304>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a2f      	ldr	r2, [pc, #188]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_GPIO_Init+0x304>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <HAL_GPIO_Init+0x304>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <HAL_GPIO_Init+0x304>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_GPIO_Init+0x304>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f aea2 	bls.w	8002de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	041a      	lsls	r2, r3, #16
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43d9      	mvns	r1, r3
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	400b      	ands	r3, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	619a      	str	r2, [r3, #24]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e267      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	2b08      	cmp	r3, #8
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b82      	ldr	r3, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e242      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b70      	ldr	r3, [pc, #448]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6f      	ldr	r2, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6c      	ldr	r2, [pc, #432]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b69      	ldr	r3, [pc, #420]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a68      	ldr	r2, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff fcfc 	bl	8002be8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff fcf8 	bl	8002be8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e207      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff fce8 	bl	8002be8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff fce4 	bl	8002be8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1f3      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1c7      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	; (8003378 <HAL_RCC_OscConfig+0x244>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7ff fc9d 	bl	8002be8 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7ff fc99 	bl	8002be8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1a8      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4925      	ldr	r1, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x244>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff fc7c 	bl	8002be8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7ff fc78 	bl	8002be8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e187      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d036      	beq.n	800338c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_RCC_OscConfig+0x248>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7ff fc5c 	bl	8002be8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff fc58 	bl	8002be8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e167      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_OscConfig+0x240>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_OscConfig+0x248>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7ff fc45 	bl	8002be8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00e      	b.n	8003380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003362:	f7ff fc41 	bl	8002be8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d907      	bls.n	8003380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e150      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ea      	bne.n	8003362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8097 	beq.w	80034c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b7d      	ldr	r3, [pc, #500]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a7c      	ldr	r2, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b74      	ldr	r3, [pc, #464]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a73      	ldr	r2, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7ff fc01 	bl	8002be8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7ff fbfd 	bl	8002be8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e10c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x2ea>
 8003410:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x30c>
 8003426:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5e      	ldr	r2, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 8003440:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	; 0x70
 800344c:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a54      	ldr	r2, [pc, #336]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7ff fbc2 	bl	8002be8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7ff fbbe 	bl	8002be8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0cb      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x334>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7ff fbac 	bl	8002be8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7ff fba8 	bl	8002be8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0b5      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a1 	beq.w	8003614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d05c      	beq.n	8003598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d141      	bne.n	800356a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7ff fb7c 	bl	8002be8 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7ff fb78 	bl	8002be8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e087      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7ff fb51 	bl	8002be8 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7ff fb4d 	bl	8002be8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e05c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x416>
 8003568:	e054      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7ff fb3a 	bl	8002be8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7ff fb36 	bl	8002be8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e045      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e038      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x4ec>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d028      	beq.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d121      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cc      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d90c      	bls.n	8003660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a58      	ldr	r2, [pc, #352]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d044      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e067      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4934      	ldr	r1, [pc, #208]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7ff fa68 	bl	8002be8 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7ff fa64 	bl	8002be8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e04f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20c      	bcs.n	800376c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f908 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08004578 	.word	0x08004578
 80037e8:	20000008 	.word	0x20000008
 80037ec:	2000000c 	.word	0x2000000c

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b090      	sub	sp, #64	; 0x40
 80037f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003800:	2300      	movs	r3, #0
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f200 80a1 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x16c>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x34>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3a>
 8003822:	e09b      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_GetSysClockFreq+0x184>)
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003828:	e09b      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800382e:	e098      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383a:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d028      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	627a      	str	r2, [r7, #36]	; 0x24
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003858:	2100      	movs	r1, #0
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800385c:	fb03 f201 	mul.w	r2, r3, r1
 8003860:	2300      	movs	r3, #0
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	4413      	add	r3, r2
 8003868:	4a43      	ldr	r2, [pc, #268]	; (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800386a:	fba0 1202 	umull	r1, r2, r0, r2
 800386e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003870:	460a      	mov	r2, r1
 8003872:	62ba      	str	r2, [r7, #40]	; 0x28
 8003874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003876:	4413      	add	r3, r2
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387c:	2200      	movs	r2, #0
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800388a:	f7fc fca9 	bl	80001e0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4613      	mov	r3, r2
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003896:	e053      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003898:	4b35      	ldr	r3, [pc, #212]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	2200      	movs	r2, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	617a      	str	r2, [r7, #20]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038aa:	f04f 0b00 	mov.w	fp, #0
 80038ae:	4652      	mov	r2, sl
 80038b0:	465b      	mov	r3, fp
 80038b2:	f04f 0000 	mov.w	r0, #0
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	0159      	lsls	r1, r3, #5
 80038bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c0:	0150      	lsls	r0, r2, #5
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	ebb2 080a 	subs.w	r8, r2, sl
 80038ca:	eb63 090b 	sbc.w	r9, r3, fp
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038e2:	ebb2 0408 	subs.w	r4, r2, r8
 80038e6:	eb63 0509 	sbc.w	r5, r3, r9
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	00eb      	lsls	r3, r5, #3
 80038f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f8:	00e2      	lsls	r2, r4, #3
 80038fa:	4614      	mov	r4, r2
 80038fc:	461d      	mov	r5, r3
 80038fe:	eb14 030a 	adds.w	r3, r4, sl
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	eb45 030b 	adc.w	r3, r5, fp
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003916:	4629      	mov	r1, r5
 8003918:	028b      	lsls	r3, r1, #10
 800391a:	4621      	mov	r1, r4
 800391c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003920:	4621      	mov	r1, r4
 8003922:	028a      	lsls	r2, r1, #10
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392a:	2200      	movs	r2, #0
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	60fa      	str	r2, [r7, #12]
 8003930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003934:	f7fc fc54 	bl	80001e0 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetSysClockFreq+0x184>)
 800395e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003964:	4618      	mov	r0, r3
 8003966:	3740      	adds	r7, #64	; 0x40
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	00f42400 	.word	0x00f42400
 8003978:	017d7840 	.word	0x017d7840

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_GetHCLKFreq+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000008 	.word	0x20000008

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003998:	f7ff fff0 	bl	800397c <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08004588 	.word	0x08004588

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffdc 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0b5b      	lsrs	r3, r3, #13
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08004588 	.word	0x08004588

080039e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	220f      	movs	r2, #15
 80039f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCC_GetClockConfig+0x60>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0207 	and.w	r2, r3, #7
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e041      	b.n	8003ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f839 	bl	8003ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f000 f9ca 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d001      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e044      	b.n	8003b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_TIM_Base_Start_IT+0xb0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d018      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x6c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d013      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x6c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x6c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x6c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x6c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d111      	bne.n	8003b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d010      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	e007      	b.n	8003b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40014000 	.word	0x40014000

08003bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0202 	mvn.w	r2, #2
 8003bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8ee 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8e0 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8f1 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0204 	mvn.w	r2, #4
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8c4 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8b6 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8c7 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0208 	mvn.w	r2, #8
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f89a 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f88c 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f89d 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0210 	mvn.w	r2, #16
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2208      	movs	r2, #8
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f870 	bl	8003de4 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f862 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f873 	bl	8003df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0201 	mvn.w	r2, #1
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fdc6 	bl	80028d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b80      	cmp	r3, #128	; 0x80
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8e2 	bl	8003f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d10e      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d107      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f838 	bl	8003e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0220 	mvn.w	r2, #32
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8ac 	bl	8003f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <TIM_Base_SetConfig+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a30      	ldr	r2, [pc, #192]	; (8003f0c <TIM_Base_SetConfig+0xec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d017      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <TIM_Base_SetConfig+0xe8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <TIM_Base_SetConfig+0xec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00f      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <TIM_Base_SetConfig+0xf4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <TIM_Base_SetConfig+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <TIM_Base_SetConfig+0xfc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <TIM_Base_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e03f      	b.n	8003fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fe fcee 	bl	8002950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f829 	bl	8003fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b0c0      	sub	sp, #256	; 0x100
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	ea40 0301 	orr.w	r3, r0, r1
 800400c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	431a      	orrs	r2, r3
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800403c:	f021 010c 	bic.w	r1, r1, #12
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800404a:	430b      	orrs	r3, r1
 800404c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	6999      	ldr	r1, [r3, #24]
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	ea40 0301 	orr.w	r3, r0, r1
 800406a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <UART_SetConfig+0x2cc>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d005      	beq.n	8004084 <UART_SetConfig+0xa0>
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <UART_SetConfig+0x2d0>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d104      	bne.n	800408e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7ff fc9a 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8004088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800408c:	e003      	b.n	8004096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800408e:	f7ff fc81 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 8004092:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	f040 810c 	bne.w	80042bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80040be:	415b      	adcs	r3, r3
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040c6:	4621      	mov	r1, r4
 80040c8:	eb12 0801 	adds.w	r8, r2, r1
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb43 0901 	adc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040f4:	462b      	mov	r3, r5
 80040f6:	eb49 0303 	adc.w	r3, r9, r3
 80040fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800410a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800410e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004112:	460b      	mov	r3, r1
 8004114:	18db      	adds	r3, r3, r3
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
 8004118:	4613      	mov	r3, r2
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	657b      	str	r3, [r7, #84]	; 0x54
 8004120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004128:	f7fc f85a 	bl	80001e0 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b61      	ldr	r3, [pc, #388]	; (80042b8 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004144:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	64b9      	str	r1, [r7, #72]	; 0x48
 8004154:	415b      	adcs	r3, r3
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800415c:	4641      	mov	r1, r8
 800415e:	eb12 0a01 	adds.w	sl, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0b01 	adc.w	fp, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417c:	4692      	mov	sl, r2
 800417e:	469b      	mov	fp, r3
 8004180:	4643      	mov	r3, r8
 8004182:	eb1a 0303 	adds.w	r3, sl, r3
 8004186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800418a:	464b      	mov	r3, r9
 800418c:	eb4b 0303 	adc.w	r3, fp, r3
 8004190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041a8:	460b      	mov	r3, r1
 80041aa:	18db      	adds	r3, r3, r3
 80041ac:	643b      	str	r3, [r7, #64]	; 0x40
 80041ae:	4613      	mov	r3, r2
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
 80041b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041be:	f7fc f80f 	bl	80001e0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <UART_SetConfig+0x2d4>)
 80041ca:	fba3 2301 	umull	r2, r3, r3, r1
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2264      	movs	r2, #100	; 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	1acb      	subs	r3, r1, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <UART_SetConfig+0x2d4>)
 80041e0:	fba3 2302 	umull	r2, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ec:	441c      	add	r4, r3
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	63b9      	str	r1, [r7, #56]	; 0x38
 8004208:	415b      	adcs	r3, r3
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004210:	4641      	mov	r1, r8
 8004212:	1851      	adds	r1, r2, r1
 8004214:	6339      	str	r1, [r7, #48]	; 0x30
 8004216:	4649      	mov	r1, r9
 8004218:	414b      	adcs	r3, r1
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004228:	4659      	mov	r1, fp
 800422a:	00cb      	lsls	r3, r1, #3
 800422c:	4651      	mov	r1, sl
 800422e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004232:	4651      	mov	r1, sl
 8004234:	00ca      	lsls	r2, r1, #3
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	4603      	mov	r3, r0
 800423c:	4642      	mov	r2, r8
 800423e:	189b      	adds	r3, r3, r2
 8004240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004244:	464b      	mov	r3, r9
 8004246:	460a      	mov	r2, r1
 8004248:	eb42 0303 	adc.w	r3, r2, r3
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800425c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004264:	460b      	mov	r3, r1
 8004266:	18db      	adds	r3, r3, r3
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 800426a:	4613      	mov	r3, r2
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800427a:	f7fb ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <UART_SetConfig+0x2d4>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	; 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	3332      	adds	r3, #50	; 0x32
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <UART_SetConfig+0x2d4>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 0207 	and.w	r2, r3, #7
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4422      	add	r2, r4
 80042aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ac:	e105      	b.n	80044ba <UART_SetConfig+0x4d6>
 80042ae:	bf00      	nop
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40011400 	.word	0x40011400
 80042b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	6239      	str	r1, [r7, #32]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
 80042da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042de:	4641      	mov	r1, r8
 80042e0:	1854      	adds	r4, r2, r1
 80042e2:	4649      	mov	r1, r9
 80042e4:	eb43 0501 	adc.w	r5, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004304:	464b      	mov	r3, r9
 8004306:	eb45 0303 	adc.w	r3, r5, r3
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800431a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800432a:	4629      	mov	r1, r5
 800432c:	008b      	lsls	r3, r1, #2
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004334:	4621      	mov	r1, r4
 8004336:	008a      	lsls	r2, r1, #2
 8004338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800433c:	f7fb ff50 	bl	80001e0 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4b60      	ldr	r3, [pc, #384]	; (80044c8 <UART_SetConfig+0x4e4>)
 8004346:	fba3 2302 	umull	r2, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	011c      	lsls	r4, r3, #4
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800435c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	61b9      	str	r1, [r7, #24]
 8004368:	415b      	adcs	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6139      	str	r1, [r7, #16]
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043c8:	4649      	mov	r1, r9
 80043ca:	008b      	lsls	r3, r1, #2
 80043cc:	4641      	mov	r1, r8
 80043ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d2:	4641      	mov	r1, r8
 80043d4:	008a      	lsls	r2, r1, #2
 80043d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043da:	f7fb ff01 	bl	80001e0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <UART_SetConfig+0x4e4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <UART_SetConfig+0x4e4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004402:	441c      	add	r4, r3
 8004404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004408:	2200      	movs	r2, #0
 800440a:	673b      	str	r3, [r7, #112]	; 0x70
 800440c:	677a      	str	r2, [r7, #116]	; 0x74
 800440e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	415b      	adcs	r3, r3
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004422:	4641      	mov	r1, r8
 8004424:	1851      	adds	r1, r2, r1
 8004426:	6039      	str	r1, [r7, #0]
 8004428:	4649      	mov	r1, r9
 800442a:	414b      	adcs	r3, r1
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800443a:	4659      	mov	r1, fp
 800443c:	00cb      	lsls	r3, r1, #3
 800443e:	4651      	mov	r1, sl
 8004440:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004444:	4651      	mov	r1, sl
 8004446:	00ca      	lsls	r2, r1, #3
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	4603      	mov	r3, r0
 800444e:	4642      	mov	r2, r8
 8004450:	189b      	adds	r3, r3, r2
 8004452:	66bb      	str	r3, [r7, #104]	; 0x68
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	667a      	str	r2, [r7, #100]	; 0x64
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004476:	4649      	mov	r1, r9
 8004478:	008b      	lsls	r3, r1, #2
 800447a:	4641      	mov	r1, r8
 800447c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004480:	4641      	mov	r1, r8
 8004482:	008a      	lsls	r2, r1, #2
 8004484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004488:	f7fb feaa 	bl	80001e0 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <UART_SetConfig+0x4e4>)
 8004492:	fba3 1302 	umull	r1, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2164      	movs	r1, #100	; 0x64
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <UART_SetConfig+0x4e4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4422      	add	r2, r4
 80044b8:	609a      	str	r2, [r3, #8]
}
 80044ba:	bf00      	nop
 80044bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c6:	bf00      	nop
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4d0d      	ldr	r5, [pc, #52]	; (8004504 <__libc_init_array+0x38>)
 80044d0:	4c0d      	ldr	r4, [pc, #52]	; (8004508 <__libc_init_array+0x3c>)
 80044d2:	1b64      	subs	r4, r4, r5
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	2600      	movs	r6, #0
 80044d8:	42a6      	cmp	r6, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	4d0b      	ldr	r5, [pc, #44]	; (800450c <__libc_init_array+0x40>)
 80044de:	4c0c      	ldr	r4, [pc, #48]	; (8004510 <__libc_init_array+0x44>)
 80044e0:	f000 f82e 	bl	8004540 <_init>
 80044e4:	1b64      	subs	r4, r4, r5
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	2600      	movs	r6, #0
 80044ea:	42a6      	cmp	r6, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f4:	4798      	blx	r3
 80044f6:	3601      	adds	r6, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fe:	4798      	blx	r3
 8004500:	3601      	adds	r6, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	08004598 	.word	0x08004598
 8004508:	08004598 	.word	0x08004598
 800450c:	08004598 	.word	0x08004598
 8004510:	0800459c 	.word	0x0800459c

08004514 <memcpy>:
 8004514:	440a      	add	r2, r1
 8004516:	4291      	cmp	r1, r2
 8004518:	f100 33ff 	add.w	r3, r0, #4294967295
 800451c:	d100      	bne.n	8004520 <memcpy+0xc>
 800451e:	4770      	bx	lr
 8004520:	b510      	push	{r4, lr}
 8004522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800452a:	4291      	cmp	r1, r2
 800452c:	d1f9      	bne.n	8004522 <memcpy+0xe>
 800452e:	bd10      	pop	{r4, pc}

08004530 <memset>:
 8004530:	4402      	add	r2, r0
 8004532:	4603      	mov	r3, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	f803 1b01 	strb.w	r1, [r3], #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
